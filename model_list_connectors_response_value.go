/*
Kafka Connect REST API

Kafka Connect REST API https://docs.confluent.io/platform/current/connect/references/restapi.html

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ListConnectorsResponseValue Connector with expanded info and status details.
type ListConnectorsResponseValue struct {
	Info *ListConnectorsResponseValueInfo `json:"info,omitempty"`
	Status *ListConnectorsResponseValueStatus `json:"status,omitempty"`
}

// NewListConnectorsResponseValue instantiates a new ListConnectorsResponseValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListConnectorsResponseValue() *ListConnectorsResponseValue {
	this := ListConnectorsResponseValue{}
	return &this
}

// NewListConnectorsResponseValueWithDefaults instantiates a new ListConnectorsResponseValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListConnectorsResponseValueWithDefaults() *ListConnectorsResponseValue {
	this := ListConnectorsResponseValue{}
	return &this
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ListConnectorsResponseValue) GetInfo() ListConnectorsResponseValueInfo {
	if o == nil || o.Info == nil {
		var ret ListConnectorsResponseValueInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListConnectorsResponseValue) GetInfoOk() (*ListConnectorsResponseValueInfo, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ListConnectorsResponseValue) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given ListConnectorsResponseValueInfo and assigns it to the Info field.
func (o *ListConnectorsResponseValue) SetInfo(v ListConnectorsResponseValueInfo) {
	o.Info = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ListConnectorsResponseValue) GetStatus() ListConnectorsResponseValueStatus {
	if o == nil || o.Status == nil {
		var ret ListConnectorsResponseValueStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListConnectorsResponseValue) GetStatusOk() (*ListConnectorsResponseValueStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ListConnectorsResponseValue) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ListConnectorsResponseValueStatus and assigns it to the Status field.
func (o *ListConnectorsResponseValue) SetStatus(v ListConnectorsResponseValueStatus) {
	o.Status = &v
}

func (o ListConnectorsResponseValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableListConnectorsResponseValue struct {
	value *ListConnectorsResponseValue
	isSet bool
}

func (v NullableListConnectorsResponseValue) Get() *ListConnectorsResponseValue {
	return v.value
}

func (v *NullableListConnectorsResponseValue) Set(val *ListConnectorsResponseValue) {
	v.value = val
	v.isSet = true
}

func (v NullableListConnectorsResponseValue) IsSet() bool {
	return v.isSet
}

func (v *NullableListConnectorsResponseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListConnectorsResponseValue(val *ListConnectorsResponseValue) *NullableListConnectorsResponseValue {
	return &NullableListConnectorsResponseValue{value: val, isSet: true}
}

func (v NullableListConnectorsResponseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListConnectorsResponseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


