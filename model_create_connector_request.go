/*
Kafka Connect REST API

Kafka Connect REST API https://docs.confluent.io/platform/current/connect/references/restapi.html

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateConnectorRequest struct for CreateConnectorRequest
type CreateConnectorRequest struct {
	// Name of the connector.
	Name *string `json:"name,omitempty"`
	// Configuration of a connector/task/worker. All keys/values should be strings.
	Config *map[string]string `json:"config,omitempty"`
}

// NewCreateConnectorRequest instantiates a new CreateConnectorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateConnectorRequest() *CreateConnectorRequest {
	this := CreateConnectorRequest{}
	return &this
}

// NewCreateConnectorRequestWithDefaults instantiates a new CreateConnectorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateConnectorRequestWithDefaults() *CreateConnectorRequest {
	this := CreateConnectorRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateConnectorRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConnectorRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateConnectorRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateConnectorRequest) SetName(v string) {
	o.Name = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CreateConnectorRequest) GetConfig() map[string]string {
	if o == nil || o.Config == nil {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConnectorRequest) GetConfigOk() (*map[string]string, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CreateConnectorRequest) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *CreateConnectorRequest) SetConfig(v map[string]string) {
	o.Config = &v
}

func (o CreateConnectorRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableCreateConnectorRequest struct {
	value *CreateConnectorRequest
	isSet bool
}

func (v NullableCreateConnectorRequest) Get() *CreateConnectorRequest {
	return v.value
}

func (v *NullableCreateConnectorRequest) Set(val *CreateConnectorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateConnectorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateConnectorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateConnectorRequest(val *CreateConnectorRequest) *NullableCreateConnectorRequest {
	return &NullableCreateConnectorRequest{value: val, isSet: true}
}

func (v NullableCreateConnectorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateConnectorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


